# Generated by Django 5.1.5 on 2025-08-27 22:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.functions.datetime
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Playerinfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('surname', models.CharField(blank=True, max_length=100, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Muž'), ('female', 'Žena'), ('other', 'Jiné')], max_length=10, null=True)),
                ('steps', models.IntegerField(blank=True, null=True, verbose_name='Počet kroků')),
                ('lvl', models.IntegerField(blank=True, default=1, null=True, verbose_name='Úroveň')),
                ('xp', models.IntegerField(blank=True, default=0, null=True, verbose_name='Zkušenosti')),
                ('rasa', models.CharField(blank=True, choices=[('Choice:', 'Vyber:'), ('human', 'Člověk'), ('elf', 'Elf'), ('dwarf', 'Trpaslík'), ('urgal', 'Urgal'), ('gnóm', 'Gnóm'), ('shadow', 'Stín')], max_length=20, null=True)),
                ('povolani', models.CharField(blank=True, choices=[('choice:', 'Vyber:'), ('ranger', 'Hraničář'), ('monk', 'Mnich'), ('warrior', 'Válečník'), ('paladin', 'Paladin'), ('mage', 'Mág'), ('rogue', 'Roguna'), ('necromancer', 'Nekromant'), ('berserker', 'Ničitel'), ('druid', 'Druid')], max_length=20, null=True)),
                ('gold', models.IntegerField(default=1, verbose_name='Počet GOLDŮ')),
                ('rohlik', models.IntegerField(default=1, verbose_name='Počet ROHLÍKŮ')),
                ('gold_growth_coefficient', models.FloatField(default=1.0, verbose_name='Koeficient růstu GOLDŮ')),
                ('last_gold_collection', models.DateTimeField(blank=True, default=django.db.models.functions.datetime.Now, null=True)),
                ('HP', models.IntegerField(blank=True, default=10, null=True, verbose_name='Počet životů')),
                ('hp_bonus', models.FloatField(blank=True, default=1, null=True, verbose_name='Bonus k životům')),
                ('strength', models.IntegerField(blank=True, default=1, null=True, verbose_name='Síla')),
                ('strength_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní síla')),
                ('dexterity', models.IntegerField(blank=True, default=1, null=True, verbose_name='Obratnost')),
                ('dexterity_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní obratnost')),
                ('intelligence', models.IntegerField(blank=True, default=1, null=True, verbose_name='Inteligence')),
                ('intelligence_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní inteligence')),
                ('charisma', models.IntegerField(blank=True, default=1, null=True, verbose_name='Charisma')),
                ('charisma_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní charisma')),
                ('vitality', models.IntegerField(blank=True, default=1, null=True, verbose_name='Vitalita')),
                ('vitality_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní vitalita')),
                ('luck', models.IntegerField(blank=True, default=1, null=True, verbose_name='Zručnost')),
                ('luck_base', models.IntegerField(blank=True, default=1, null=True, verbose_name='Základní zručnost')),
                ('dmg_atribut', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
